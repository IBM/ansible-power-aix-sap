---
#   Copyright 2022 IBM Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

###########################################
# tasks file for sap_start_pre
###########################################

###########################################
# PreCheck SAP sid
###########################################
- name: Check if startsap_input_sap_sid variable is provided
  fail:
    msg: "Error: Input parameter startsap_input_sap_sid is required."
  when: (startsap_input_sap_sid is not defined) or (startsap_input_sap_sid is none)

###########################################
# PreCheck SAP nr
###########################################
- name: Check if startsap_input_sap_instance_nr variable is provided
  fail:
    msg: "Error: Invalid value '' specified for startsap_input_sap_instance_nr"
  when: startsap_input_sap_instance_nr is none

###########################################
# Check SAP SID
###########################################
- name: Search profile name for {{ startsap_input_sap_sid }} in /usr/sap/sapservices
  shell:  "grep {{ startsap_input_sap_sid }} /usr/sap/sapservices | grep -v '^ *#'"
  register: startsap_list_sap_services
  ignore_errors: True
  no_log: True

- name: Error if {{ startsap_input_sap_sid }} was not found in /usr/sap/sapservices
  fail:
    msg: "Error: SAP system {{ startsap_input_sap_sid }} not found."
  when: startsap_list_sap_services.stdout == ""

###########################################
# Get if there is any running service
###########################################
- name: Set variable for SAP service profile
  set_fact:
    startsap_list_sap_services:  "{{ startsap_list_sap_services.stdout_lines[0].split()[4] }}"

###########################################
# Check running SAP Service
###########################################
- name: Get one instance number from profile
  shell: grep -w 'SAPSYSTEM'  "{{ startsap_list_sap_services|replace('pf=', '') }}"
  register: startsap_sap_sid_profile_name

- name: Check if SAP instance is inactive
  shell: "{{ startsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ startsap_sap_sid_profile_name.stdout.split()[2] }} -function GetSystemInstanceList"
  environment:
    LIBPATH: "{{ startsap_dir_sapctrl_managednode }}"
  args:
    chdir: "{{ startsap_dir_sapctrl_managednode }}"
  register: startsap_output_list_inactive_instances
  failed_when: startsap_output_list_inactive_instances.rc >= 2

- name: Error if SAP service is not inactive
  fail:
    msg: "Error: No SAP start service is active for SAP system {{ startsap_input_sap_sid }}"
  failed_when: startsap_output_list_inactive_instances.rc == 1

###########################################
# Check running instances
###########################################

####################
# startsap_input_sap_instance_nr is defined
####################
- name: Check if SAP instance is inactive
  shell: "{{ startsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ startsap_sap_sid_profile_name.stdout.split()[2] }} -function GetSystemInstanceList | grep {{ ansible_hostname }} | grep -i gray | sort -k 5nr | grep '{{ ansible_hostname }}, {{ startsap_input_sap_instance_nr }}'"
  environment:
    LIBPATH: "{{ startsap_dir_sapctrl_managednode }}"
  failed_when: startsap_output_selected_inactive_instance.rc >= 2
  register: startsap_output_selected_inactive_instance
  when: startsap_input_sap_instance_nr is defined

- name: Set variable for inactive SAP instance
  set_fact:
    startsap_list_instances_to_start:  "{{ startsap_output_selected_inactive_instance.stdout_lines }}"
  when:  startsap_output_selected_inactive_instance is defined

#######################
# startsap_input_sap_instance_nr is undefined
#######################
- name: Get list of inactive SAP instances
  shell: "{{ startsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ startsap_sap_sid_profile_name.stdout.split()[2] }} -function GetSystemInstanceList | grep -i gray | sort -k 5nr,"
  environment:
    LIBPATH: "{{ startsap_dir_sapctrl_managednode }}"
  args:
    chdir: "{{ startsap_dir_sapctrl_managednode }}"
  register: startsap_output_selected_inactive_instance
  failed_when: startsap_output_selected_inactive_instance.rc >= 2
  when: startsap_input_sap_instance_nr is undefined

- name: Set variable for inactive SAP instance
  set_fact:
    startsap_list_instances_to_start:  "{{ startsap_output_selected_inactive_instance.stdout_lines }}"
  when:  startsap_input_sap_instance_nr is undefined

- name: Error if no SAP instance is inactive
  fail:
    msg: "Error: No inactive SAP instance found for SAP system {{ startsap_input_sap_sid }}"
  failed_when: startsap_input_sap_instance_nr is undefined

#- name: Set variable for inactive instance
#  set_fact:
#    startsap_list_instances_to_start:  "{{ startsap_output_selected_inactive_instance.stdout_lines }}"

######################################################
# Display SAP start commands
######################################################
- name: Show start SAP instance command
  debug:
    msg: "SAP start command - {{ startsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ startsap_sap_sid_profile_name.stdout.split()[2] }} -function InstanceStart {{ item.split()[0]|replace(',', '') }} {{ item.split()[1]|replace(',', '') }}"
  with_items: "{{ startsap_list_instances_to_start }}"
