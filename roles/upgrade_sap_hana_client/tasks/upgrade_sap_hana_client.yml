---
#   Copyright 2022 IBM Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.



###########################################
# PreCheck


##########################################
# Check that he specified user exist
##########################################
- name: Validate user "{{upgowner_of_client_dir|lower}}"
  shell: "id {{upgowner_of_client_dir|lower}} | grep -v grep | cat"
  register: check_user_existence

- name: Error if "{{upgowner_of_client_dir|lower}}" does not exist
  fail:
    msg: "Error: User: {{upgowner_of_client_dir|lower}} does not exist."
  when: check_user_existence.stderr_lines|length > 0

######################################################
# Validate user (owner) of the HANA client directory: "{{upgowner_of_client_dir|lower}}"
######################################################
- name: Validate user "{{upgowner_of_client_dir|lower}}"
  shell: "id {{upgowner_of_client_dir|lower}} | grep -v grep | cat"
  register: upgcheck_user_existence

- name: Error if "{{upgowner_of_client_dir|lower}}" does not exist
  fail:
    msg: "Error: User: {{upgowner_of_client_dir|lower}} does not exist."
  when: upgcheck_user_existence|length == 0

 # check that specified user is really the owner of the HANA client dir
- name: "check that specified user is really the owner of the HANA client dir"
  shell: "ls -rtl {{upgdir_of_HANA_client_managednode}} |grep  hdbsql | grep {{upgowner_of_client_dir}}"
  become_user: "{{upgowner_of_client_dir|lower}}"
  register: check_for_valid_user

- name: "Error if {{upgowner_of_client_dir}} is not the owner of files in HANA client dir"
  fail:
    msg: "Error: User: {{upgowner_of_client_dir|lower}} is not the owner of {{upgowner_of_client_dir}}"
  when: check_for_valid_user == 0


# Check for the existence of the SAPCAR utility
- name: "Check if SAPCAR {{upglocation_of_SAPCAR_utility_managednode}}//{{upgsapcar_file_name}} exists"
  stat:
    path: "{{upglocation_of_SAPCAR_utility_managednode}}//{{upgsapcar_file_name}}"
  register: file_data

#  1) Issue an error message if the SAPCAR utility does not exist
#  2) Exit the playbook
- name: "Error if SAPCAR: {{upglocation_of_SAPCAR_utility_managednode}}//{{upgsapcar_file_name}} does not exist "
  fail:
    msg: "Error: SAPCAR file: {{upglocation_of_SAPCAR_utility_managednode}}//{{upgsapcar_file_name}} does not exist"
  when: not file_data.stat.exists

# Check for the existence of the SAP HANA Client SAR file
- name: "Check if SAP HANA SAR file {{upglocation_of_HANA_Client_SAR_managednode}}//{{upgfile_name_of_HANA_client_SAR_file}} exists"
  stat:
    path: "{{upglocation_of_HANA_Client_SAR_managednode}}//{{upgfile_name_of_HANA_client_SAR_file}}"
  register: file_data

#  1) Issue an error message if the HANA client SAPCAR file does not exist
#  2) Exit the playbook
- name: "Error if SAP HANA SAR file: {{upglocation_of_HANA_Client_SAR_managednode}}//{{upgfile_name_of_HANA_client_SAR_file}} does not exist "
  fail:
    msg: "Error: SAP HANA client SAR file: {{upglocation_of_HANA_Client_SAR_managednode}}//{{upgfile_name_of_HANA_client_SAR_file}} does not exist"
  when: not file_data.stat.exists


###########################################
# Prepare target temp dir
############################################


# The backup directory can be used for multiple backups,, therefor the directory will be reused
- name: Check if directory {{upgbackup_for_dir_hana_client_managednode}} exists
  stat:
    path: "{{upgbackup_for_dir_hana_client_managednode}}"
  register: file_data

- name: Ensure directory {{ upgbackup_for_dir_hana_client_managednode }} exists, otherwise create
  file:
    path: "{{ upgbackup_for_dir_hana_client_managednode }}"
    state: directory
    mode: '0777'
  when:  not file_data.stat.exists

# The working directory will be used temporarily, therefore the directory will be created freshly.
- name: Delete directory {{ upgtemp_working_dir_managednode }} if exists
  file:
    path: "{{ upgtemp_working_dir_managednode }}"
    state: absent
    mode: '0777'

- name: Create directory {{ upgtemp_working_dir_managednode }}
  file:
    path: "{{ upgtemp_working_dir_managednode}}"
    state: directory
    mode: '0777'


# Backup existing HANA Client directory into: upgtemp_working_dir_managednode as _save_HDB_Client.<timestamp>.tar.Z
- name: "Tar,compress and backup the content of a the existing HANA client directory"
  shell: "cd {{upgtemp_working_dir_managednode}}; rm -f {{upgtemp_working_dir_managednode}}//__save_HDB_Client.tar;  tar -cvf  {{upgtemp_working_dir_managednode}}//__save_HDB_Client.tar  {{upgdir_of_HANA_client_managednode}}; compress {{upgtemp_working_dir_managednode}}//__save_HDB_Client.tar;"
  become_user: "{{upgowner_of_client_dir|lower}}"
  register: save_work_dir_output

  # Extract the HDB Client into a temporary working directory
- name: "Extract HANA Client SAR file into a "
  shell: "cd {{upgtemp_working_dir_managednode}};{{upglocation_of_SAPCAR_utility_managednode}}//{{upgsapcar_file_name}} -xvf {{upglocation_of_HANA_Client_SAR_managednode}}//{{upgfile_name_of_HANA_client_SAR_file}}" 
  become_user: "{{upgowner_of_client_dir|lower}}"
  register: save_work_dir_output

# Handling of a wrong SAR file which isn't a HANA client SAR file and therefor does not contain the appropriate files.
# Check for the existence of {{upgtemp_working_dir_managednode}}//SAP_HANA_CLIENT//hdbinst
- name: "Check if {{upgtemp_working_dir_managednode}}//SAP_HANA_CLIENT//hdbinst exists"
  stat:
    path: "{{upgtemp_working_dir_managednode}}//SAP_HANA_CLIENT//hdbinst"
  register: file_data

#  1) Issue an error message if  the {{upgtemp_working_dir_managednode}}//SAP_HANA_CLIENT//hdbinst does not exist. A wrong SAR file might be used.
#  2) Exit the playbook
- name: "Check for correct SAR file."
  fail:
    msg: Error {{upgtemp_working_dir_managednode}}//SAP_HANA_CLIENT//hdbinst does not exist. A wrong SAR file might be used."
  when: not file_data.stat.exists

# This is the updated of the HDB Client directory. The update happens if no one uses this HDB client.
- name: "Update HANA Client directory."
  ignore_errors: yes
  shell: "{{upgtemp_working_dir_managednode}}//SAP_HANA_CLIENT//hdbinst --path={{upgdir_of_HANA_client_managednode}}"
  become: yes
  become_method: su
  become_flags: '-'
  become_user: "{{upgowner_of_client_dir|lower}}"
  register:  update_hdb_client_output

# Change owner
- name: "Change owner of files"
  shell: chown -R {{upgowner_of_client_dir|lower}} {{upgdir_of_HANA_client_managednode}}
  when:  update_hdb_client_output.rc == 0

 # Copy HANA Client backup file from temp to backup directory
- name: "Copy {{upgtemp_working_dir_managednode}}//__save_HDB_Client.tar.Z to {{upgbackup_for_dir_hana_client_managednode}}//_save_HDB_Client.<timestamp>.tar.Z"
  shell: "cp {{upgtemp_working_dir_managednode}}//__save_HDB_Client.tar.Z {{upgbackup_for_dir_hana_client_managednode}}//__save_HDB_Client.$(date +\"%Y%m%d%H%M%S\").tar.Z;"
  become_user: "{{upgowner_of_client_dir|lower}}"
  register: save_work_dir_output
  when:  update_hdb_client_output.rc == 0

# Clean-up the temporary working directory
- name: Delete directory {{ upgtemp_working_dir_managednode }}
  file:
    path: "{{ upgtemp_working_dir_managednode }}"
    state: absent
    mode: '0777'

# If an Application Server uses the hdbclient, the update fails. A message is issued which is handled in the following step.
- name: "Error handling: Check about 'HANA client in use by any Application Server'"
  ignore_errors: yes
  fail:
    msg: "Update of HANA client not possible. It seems that an SAP instance is using this client."
  when:  update_hdb_client_output.stderr | regex_search("Terminate all locking processes")


