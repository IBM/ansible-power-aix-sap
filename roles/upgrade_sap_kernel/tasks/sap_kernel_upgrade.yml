---
#   Copyright 2022 IBM Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

###########################################
# tasks file for sap_kernel_upgrade
###########################################

#####################################
# PreCheck upgsapkrn_input_sap_sid
#####################################
- name: Check upgsapkrn_input_sap_sid variable
  fail:
    msg: "Error: upgsapkrn_input_sap_sid is undefined."
  when: (upgsapkrn_input_sap_sid is not defined) or (upgsapkrn_input_sap_sid is none)
  

#########################################################
# Prepare directory on managed node to upload resources
#########################################################
- name: Check dir {{ upgsapkrn_dir_upload_managednode }} on managed node to upload resources
  file:
    path: "{{ upgsapkrn_dir_upload_managednode }}"
    state: absent
    owner: "{{ upgsapkrn_input_sap_adm }}"
    group: "{{ upgsapkrn_input_sap_sys }}"
    mode: 0755

- name: Check directory {{ upgsapkrn_dir_upload_managednode }}
  file:
    path: "{{ upgsapkrn_dir_upload_managednode }}"
    state: directory
    owner: "{{ upgsapkrn_input_sap_adm }}"
    group: "{{ upgsapkrn_input_sap_sys }}"
    mode: 0755

#########################################################
# Prepare directory on managed node to extract resources
#########################################################
- name: Check dir {{ upgsapkrn_dir_extracted_sar_managednode }} on managed node to extract resources
  file:
    path: "{{ upgsapkrn_dir_extracted_sar_managednode }}"
    state: absent
    owner: "{{ upgsapkrn_input_sap_adm }}"
    group: "{{ upgsapkrn_input_sap_sys }}"
    mode: 0755

- name: Check directory {{ upgsapkrn_dir_extracted_sar_managednode }}
  file:
    path: "{{ upgsapkrn_dir_extracted_sar_managednode }}"
    state: directory
    owner: "{{ upgsapkrn_input_sap_adm }}"
    group: "{{ upgsapkrn_input_sap_sys }}"
    mode: 0755
    
######################################################
# Prepare directory on managed node to backup kernel
######################################################
- name: Check dir {{ upgsapkrn_dir_extracted_sar_managednode }} to backup kernel
  file:
    path: "{{ upgsapkrn_dir_kernel_backup_managednode }}"
    state: absent
    owner: "{{ upgsapkrn_input_sap_adm }}"
    group: "{{ upgsapkrn_input_sap_sys }}"
    mode: 0755

- name: Check directory {{ upgsapkrn_dir_kernel_backup_managednode }}
  file:
    path: "{{ upgsapkrn_dir_kernel_backup_managednode }}"
    state: directory
    owner: "{{ upgsapkrn_input_sap_adm }}"
    group: "{{ upgsapkrn_input_sap_sys }}"
    mode: 0755
    
######################################################
# Search SAPCAR in sapcar directory on managed node
######################################################
- name: Search for SAPCAR in {{ upgsapkrn_dir_download_sapcar_managednode }} directory
  shell:
    chdir: "{{ upgsapkrn_dir_download_sapcar_managednode }}"
    cmd: 'ls -d {{ upgsapkrn_file_sapcar }} | cat'
  register: upgsapkrn_output_search_sapcar
  when: upgsapkrn_fact_sapcar_file is undefined
  
- name: If found, set SAPCAR path variable
  ansible.builtin.set_fact:
    upgsapkrn_fact_sapcar_file: "{{ upgsapkrn_dir_download_sapcar_managednode | default(upgsapkrn_fact_sapcar_file) }}"
  when: upgsapkrn_output_search_sapcar.stdout != "" and upgsapkrn_fact_sapcar_file is undefined

######################################################
# if SAPCAR available, upload to managed node
######################################################
- name: Upload SAPCAR into dir {{ upgsapkrn_dir_upload_managednode }}
  copy:
    src: "{{ upgsapkrn_fact_sapcar_file }}/{{ upgsapkrn_file_sapcar }}"
    dest: "{{ upgsapkrn_dir_upload_managednode }}/{{ upgsapkrn_file_sapcar }}"
    mode: '0755'
    remote_src: yes
  when: upgsapkrn_output_search_sapcar.stdout != ""

- name: If found, set SAPCAR path variable
  ansible.builtin.set_fact:
    upgsapkrn_fact_sapcar_file: "{{ upgsapkrn_dir_upload_managednode }}"
  when: upgsapkrn_output_search_sapcar.stdout != ""
 
######################################################
# Search SAPCAR in sar directory on managed node
######################################################
- name: Search for SAPCAR in {{ upgsapkrn_dir_download_sar_managednode }} directory
  shell:
    chdir: "{{ upgsapkrn_dir_download_sar_managednode }}"
    cmd: 'ls -d {{ upgsapkrn_file_sapcar }} | cat'
  register: upgsapkrn_output_search_sapcar_download_sar_managednode
  when: upgsapkrn_fact_sapcar_file_in_saphostagent_dir is undefined
   
- name: If found, set SAPCAR path variable
  ansible.builtin.set_fact:
    upgsapkrn_fact_sapcar_file_in_saphostagent_dir: "{{ upgsapkrn_dir_download_sar_managednode | default(upgsapkrn_fact_sapcar_file) }}"
  when: upgsapkrn_fact_sapcar_file is undefined and upgsapkrn_fact_sapcar_file_in_saphostagent_dir is undefined and upgsapkrn_output_search_sapcar_download_sar_managednode.stdout != ""
 
######################################################
# if SAPCAR available , upload to managed node
######################################################
- name: Upload SAPCAR into dir {{ upgsapkrn_dir_upload_managednode }}
  copy:
    src: "{{ upgsapkrn_fact_sapcar_file_in_saphostagent_dir }}/{{ upgsapkrn_file_sapcar }}"
    dest: "{{ upgsapkrn_dir_upload_managednode }}/{{ upgsapkrn_file_sapcar }}"
    mode: '0755'
  when: upgsapkrn_output_search_sapcar_download_sar_managednode.stdout != "" and upgsapkrn_fact_sapcar_file is undefined

- name: If found, set SAPCAR path variable
  ansible.builtin.set_fact:
    upgsapkrn_fact_sapcar_file: "{{ upgsapkrn_dir_upload_managednode }}"
  when: upgsapkrn_output_search_sapcar_download_sar_managednode.stdout != "" and upgsapkrn_fact_sapcar_file is undefined
  
################################################################
# Search SAPCAR in the SAP kernel exe dir on managed node
################################################################
- name: Search for SAPCAR in {{ upgsapkrn_dir_download_sar_managednode  }} directory
  shell:
    chdir: "{{ upgsapkrn_dir_sapcar_default_managednode }}"
    cmd: 'ls -d {{ upgsapkrn_file_sapcar }} | cat'
  register: sap_upgrade_sapcar_remote_available
  when: upgsapkrn_fact_sapcar_file is undefined
  
- name: If found, set SAPCAR path variable
  ansible.builtin.set_fact:
    upgsapkrn_fact_sapcar_file: "{{ upgsapkrn_dir_sapcar_default_managednode }}"
  when: upgsapkrn_fact_sapcar_file is undefined and upgsapkrn_fact_sapcar_file_in_saphostagent_dir is undefined and sap_upgrade_sapcar_remote_available.stdout != ""

######################################################
# end, if sapcar not available
######################################################
- name: Check SAPCAR in {{ upgsapkrn_fact_sapcar_file}}
  fail:
    msg: "Error: no SAPCAR found in {{ upgsapkrn_dir_download_sapcar_managednode }} , {{ upgsapkrn_dir_download_sar_managednode }} or {{ upgsapkrn_dir_sapcar_default_managednode }}"
  when: upgsapkrn_fact_sapcar_file is undefined

###############################################################################
# Search SAR files in directory on managed node
###############################################################################
- name: Search for SAR files in folder {{ ansible_facts['nodename'] }}:{{ upgsapkrn_dir_download_sar_managednode }}
  ## shell code can result into "file not found" and should not return any error
  shell: ls {{ item }} 2>/dev/null || true
  ## shell code could may be not work well for csh
  ## try to make sure that shell type "sh" is used. but maybe a link on some systems to
  ## call a diffrent shell
  args:
    executable: /bin/sh
  register: files
  with_items:
    - "{{ upgsapkrn_dir_download_sar_managednode }}/*.SAR"
    - "{{ upgsapkrn_dir_download_sar_managednode }}/*.sar"

###############################################################################
# end, if no SAR files available
###############################################################################
- name: "Check amount of SAR files found"
  ## Check task: this should fail as soon of not sufficient amount of SAR files found to copy
  fail:
    msg: "ERROR: no sar files found in directory: {{ upgsapkrn_dir_download_sar_managednode }} "
  when: files.results|map(attribute='stdout_lines')|list|unique|first|length < 1

###############################################################################
# Prepare SAR files destination directory on managed node
###############################################################################
- name: "Make sure destination Dir exists: {{ ansible_facts['nodename'] }}:{{ upgsapkrn_dir_upload_managednode }}"
  shell:
    cmd: mkdir -p "{{ upgsapkrn_dir_upload_managednode }}"
    warn: false

###############################################################################
# Permissions for SAR files destination directory on managed node
###############################################################################
- name: "Set permissions on destination Dir: {{ ansible_facts['nodename'] }}:{{ upgsapkrn_dir_upload_managednode }}"
  shell:
    cmd: chmod 0755 "{{ upgsapkrn_dir_upload_managednode }}"
    warn: false

###############################################################################
# Copy SAR files to final destination dir on managed node
###############################################################################
- name: "Copy SAR files now to {{ ansible_facts['nodename'] }}:{{ upgsapkrn_dir_download_sar_managednode }}"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ upgsapkrn_dir_upload_managednode }}"
    owner: "{{ upgsapkrn_input_sap_adm }}"
    group: "{{ upgsapkrn_input_sap_sys }}"
    mode: 0644
    ## all action on remote host:
    remote_src: yes
  with_items: "{{ files.results|map(attribute='stdout_lines')|list }}"

######################################################
# Extract SAR files into dir on managed node
############################################### ######
- name: Extract SAR files into dir {{ upgsapkrn_dir_extracted_sar_managednode }}
  become_user: "{{ upgsapkrn_input_sap_adm }}"
  become: yes
  shell: "ls {{ upgsapkrn_dir_upload_managednode }}/*.*(sar|SAR)* | xargs -n1 {{ upgsapkrn_fact_sapcar_file }}/{{ upgsapkrn_file_sapcar }} -xvf"
  environment:
    LIBPATH: "{{ upgsapkrn_dir_extracted_sar_managednode }}"
  args:
    chdir: "{{ upgsapkrn_dir_extracted_sar_managednode }}"
  register: result_files
  failed_when: result_files.rc >= 2

######################################################
# Create backup on managed node
######################################################
- name: Create backup into dir {{ upgsapkrn_dir_kernel_backup_managednode }}
  become_user: "{{ upgsapkrn_input_sap_adm }}"
  become: yes
  shell: "cp -rp {{ upgsapkrn_dir_upgrade_kernel }}/* {{ upgsapkrn_dir_kernel_backup_managednode }}"
  environment:
    LIBPATH: "{{ upgsapkrn_dir_kernel_backup_managednode }}"
  args:
    chdir: "{{ upgsapkrn_dir_kernel_backup_managednode }}"
  register: result_files
  failed_when: result_files.rc >= 2

######################################################
# copy files to SAP kernel exe dir
######################################################
- name: Copy extracted files into kernel dir {{ upgsapkrn_dir_upgrade_kernel }}
  become_user: "{{ upgsapkrn_input_sap_adm }}"
  become: yes
  shell: "cp -rp {{ upgsapkrn_dir_extracted_sar_managednode }}/* {{ upgsapkrn_dir_upgrade_kernel }}"
  environment:
    LIBPATH: "{{ upgsapkrn_dir_upgrade_kernel }}"
  args:
    chdir: "{{ upgsapkrn_dir_upgrade_kernel }}"
  register: result_files
  failed_when: result_files.rc >= 2

