---
#   Copyright 2022 IBM Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

###########################################
# tasks file for sap_stop_pre
###########################################

###########################################
# PreCheck SAP sid
###########################################
- name: Check if stopsap_input_sap_sid variable is provided
  fail:
    msg: "Error: Input parameter stopsap_input_sap_sid is required."
  when: (stopsap_input_sap_sid is not defined) or (stopsap_input_sap_sid is none)

###########################################
# PreCheck SAP nr
###########################################
- name: Check if stopsap_input_sap_instance_nr variable is provided
  fail:
    msg: "Error: Invalid value '' specified for stopsap_input_sap_instance_nr"
  when: stopsap_input_sap_instance_nr is none

###########################################
# Check SAP SID
###########################################
- name: Search profile name for {{ stopsap_input_sap_sid }} in /usr/sap/sapservices
  shell:  "grep {{ stopsap_input_sap_sid }} /usr/sap/sapservices | grep -v '^ *#'"
  register: stopsap_list_sap_services
  ignore_errors: True
  no_log: True

- name: Error if {{ stopsap_input_sap_sid }} was not found in /usr/sap/sapservices
  fail:
    msg: "Error: SAP system {{ stopsap_input_sap_sid }} not found."
  when: stopsap_list_sap_services.stdout == ""

###########################################
# Get if there is any running service
###########################################
- name: Set variable for SAP service profile
  set_fact:
    stopsap_list_sap_services:  "{{ stopsap_list_sap_services.stdout_lines[0].split()[4] }}"

###########################################
# Check running SAP Service
###########################################
- name: Get one instance number from profile
  shell: grep -w 'SAPSYSTEM'  "{{ stopsap_list_sap_services|replace('pf=', '') }}"
  register: stopsap_sap_sid_profile_name

- name: Check if SAP instance is active
  shell: "{{ stopsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ stopsap_sap_sid_profile_name.stdout.split()[2] }} -function GetSystemInstanceList"
  environment:
    LIBPATH: "{{ stopsap_dir_sapctrl_managednode }}"
  args:
    chdir: "{{ stopsap_dir_sapctrl_managednode }}"
  register: stopsap_output_list_active_instances
  failed_when: stopsap_output_list_active_instances.rc >= 2

- name: Error if SAP service is not active
  fail:
    msg: "Error: No SAP start service is active for SAP system {{ stopsap_input_sap_sid }}"
  failed_when: stopsap_output_list_active_instances.rc == 1

###########################################
# Check running instances
###########################################

####################
# stopsap_input_sap_instance_nr is defined
####################
- name: Check if SAP instance is active
  shell: "{{ stopsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ stopsap_sap_sid_profile_name.stdout.split()[2] }} -function GetSystemInstanceList | grep {{ ansible_hostname }} | grep -i green | sort -k 5nr | grep '{{ ansible_hostname }}, {{ stopsap_input_sap_instance_nr }}'"
  environment:
    LIBPATH: "{{ stopsap_dir_sapctrl_managednode }}"
  failed_when: stopsap_output_selected_active_instance.rc >= 2
  register: stopsap_output_selected_active_instance
  when: stopsap_input_sap_instance_nr is defined

- name: Set variable for active SAP instance
  set_fact:
    stopsap_list_instances_to_stop:  "{{ stopsap_output_selected_active_instance.stdout_lines }}"
  when:  stopsap_input_sap_instance_nr is defined

#######################
# stopsap_input_sap_instance_nr is undefined
#######################
- name: Get list of active SAP instances
  shell: "{{ stopsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ stopsap_sap_sid_profile_name.stdout.split()[2] }} -function GetSystemInstanceList | grep -i green | sort -k 5nr,"
  environment:
    LIBPATH: "{{ stopsap_dir_sapctrl_managednode }}"
  args:
    chdir: "{{ stopsap_dir_sapctrl_managednode }}"
  failed_when: stopsap_output_selected_active_instance.rc >= 2
  register: stopsap_output_selected_active_instance
  when: stopsap_input_sap_instance_nr is undefined

- name: Set variable for active SAP instance
  set_fact:
    stopsap_list_instances_to_stop:  "{{ stopsap_output_selected_active_instance.stdout_lines }}"
  when:  stopsap_input_sap_instance_nr is undefined

- name: Error if no SAP instance is active
  fail:
    msg: "Error: No active SAP instance found for SAP system {{ stopsap_input_sap_sid }}"
  failed_when: stopsap_input_sap_instance_nr is undefined

#- name: Set variable for active instance
#  set_fact:
#    stopsap_list_instances_to_stop:  "{{ stopsap_output_selected_active_instance.stdout_lines }}"

######################################################
# Display SAP stop commands
######################################################
- name: Show stop SAP instance command
  debug:
    msg: "SAP stop command - {{ stopsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ stopsap_sap_sid_profile_name.stdout.split()[2] }} -function InstanceStop {{ item.split()[0]|replace(',', '') }} {{ item.split()[1]|replace(',', '') }}{{ stopsap_softtimeout }}"
  with_items: "{{ stopsap_list_instances_to_stop }}"
